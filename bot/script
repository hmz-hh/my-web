import os
import json
import logging
import re
from typing import Dict, Any

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# ====== إعداداتك ======
TOKEN = "8202145016:AAFswa7YiKXUOOTywr-It1f0nNpCQ04Ogv4"
ADMIN_ID = 7432279779

# ====== اللوجينغ ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ====== مسارات الحفظ ======
DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
FILE_PATH = "/var/www/html/ips.txt"

# ====== قاعدة البيانات ======
users_db: Dict[int, Dict[str, Any]] = {}

# ====== أدوات الحفظ/القراءة ======
def ensure_data_dir():
    os.makedirs(DATA_DIR, exist_ok=True)

def load_db():
    ensure_data_dir()
    global users_db
    if os.path.isfile(USERS_FILE):
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                raw = json.load(f)
            users_db = {int(k): v for k, v in raw.items()}
            logging.info("✅ Loaded users DB")
        except Exception as e:
            logging.error("⚠️ Failed to load DB: %s", e)
            users_db = {}
    else:
        users_db = {}

def save_db():
    ensure_data_dir()
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users_db, f, ensure_ascii=False, indent=2)
        logging.debug("💾 Saved DB.")
    except Exception as e:
        logging.error("❌ Failed to save DB: %s", e)

def save_ips_txt():
    """يكتب جميع الـ IPs ديال جميع المستخدمين فـ ملف ips.txt"""
    try:
        lines = []
        for _, data in users_db.items():
            lines.extend(data["ips"])
        with open(FILE_PATH, "w", encoding="utf-8") as f:
            f.write("\n".join(lines))
        logging.debug("💾 Saved ips.txt.")
    except Exception as e:
        logging.error(f"❌ Failed to write ips.txt: {e}")

# ====== فاليديشن ديال الإدخال ======
def valid_ip_format(data: str) -> bool:
    return bool(re.match(r"^\d{1,3}(\.\d{1,3}){3}@\d{4}/\d{2}/\d{2}$", data))

# ====== الأوامر ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    uname = f"@{user.username}" if user.username else user.full_name

    if uid not in users_db:
        users_db[uid] = {"username": uname, "ips": [], "is_admin": (uid == ADMIN_ID)}
        save_db()
        save_ips_txt()
        if uid != ADMIN_ID:
            await context.bot.send_message(
                ADMIN_ID,
                f"🚨 New user joined\nID: {uid}\nUsername: {uname}"
            )

    text = (
        "Available commands  : ▶️\n\n"
        "Settings script vps :\n"
        "/newip   -  add new ip\n"
        "/showip  -  show ip\n"
        "/delip   -  delete ip\n"
    )
    if users_db[uid]["is_admin"]:
        text += "/addadmin - add new admin"

    await update.message.reply_text(text)

async def newip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("✍️ Please send the IP in format: `x.x.x.x@YYYY/MM/DD`", parse_mode="Markdown")
    context.user_data["awaiting_ip"] = True

async def showip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id

    if uid not in users_db:
        users_db[uid] = {"username": user.full_name, "ips": [], "is_admin": (uid == ADMIN_ID)}
        save_db()
        save_ips_txt()

    if users_db[uid]["is_admin"]:
        keyboard = [[InlineKeyboardButton(data["username"], callback_data=f"show_{u}")]
                    for u, data in users_db.items()]
        await update.message.reply_text("👥 Select user to view IPs:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        ips = users_db[uid]["ips"]
        text = "📄 Your IPs:\n" + "\n".join([f"{i+1}) {ip}" for i, ip in enumerate(ips)]) if ips else "⚠️ No IPs added."
        await update.message.reply_text(text)

async def delip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id

    if uid not in users_db:
        users_db[uid] = {"username": user.full_name, "ips": [], "is_admin": (uid == ADMIN_ID)}
        save_db()
        save_ips_txt()

    if users_db[uid]["is_admin"]:
        keyboard = [[InlineKeyboardButton(data["username"], callback_data=f"remove_{u}")]
                    for u, data in users_db.items()]
        await update.message.reply_text("🗑️ Select user to remove IPs:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        ips = users_db[uid]["ips"]
        if not ips:
            await update.message.reply_text("⚠️ You have no IPs.")
            return
        await update.message.reply_text(
            "✍️ Enter the line number you want to delete:\n" +
            "\n".join([f"{i+1}) {ip}" for i, ip in enumerate(ips)])
        )
        context.user_data["awaiting_remove_ip"] = True

async def addadmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in users_db or not users_db[uid]["is_admin"]:
        await update.message.reply_text("🚫 You don't have permission.")
        return
    await update.message.reply_text("✍️ Send me the user ID you want to make admin.")
    context.user_data["awaiting_admin"] = True

# ====== الأزرار ======
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("show_"):
        target_uid = int(data.split("_", 1)[1])
        if target_uid in users_db:
            ips = users_db[target_uid]["ips"]
            if ips:
                text = f"📄 IPs of {users_db[target_uid]['username']}:\n" + "\n".join([f"{i+1}) {ip}" for i, ip in enumerate(ips)])
            else:
                text = f"⚠️ No IPs for {users_db[target_uid]['username']}."
            await query.edit_message_text(text)

    elif data.startswith("remove_"):
        target_uid = int(data.split("_", 1)[1])
        if target_uid in users_db:
            ips = users_db[target_uid]["ips"]
            if not ips:
                await query.edit_message_text(f"⚠️ No IPs for {users_db[target_uid]['username']}.")
                return
            text = (
                f"✍️ Enter the line number you want to delete from {users_db[target_uid]['username']}:\n" +
                "\n".join([f"{i+1}) {ip}" for i, ip in enumerate(ips)])
            )
            await query.edit_message_text(text)
            context.user_data["awaiting_remove_ip"] = True
            context.user_data["remove_from"] = target_uid

# ====== النصوص ======
async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    text = (update.message.text or "").strip()

    if uid not in users_db:
        users_db[uid] = {"username": user.full_name, "ips": [], "is_admin": (uid == ADMIN_ID)}
        save_db()
        save_ips_txt()

    if context.user_data.get("awaiting_ip"):
        if valid_ip_format(text):
            users_db[uid]["ips"].append(text)
            save_db()
            save_ips_txt()
            await update.message.reply_text(f"✅ Added successfully: {text}")
        else:
            await update.message.reply_text("❌ Invalid format. Please use `IP@YYYY/MM/DD`", parse_mode="Markdown")
        context.user_data["awaiting_ip"] = False
        return

    if context.user_data.get("awaiting_remove_ip"):
        try:
            index = int(text) - 1
            target_uid = context.user_data.get("remove_from", uid)
            ips = users_db[target_uid]["ips"]
            if 0 <= index < len(ips):
                removed = ips.pop(index)
                save_db()
                save_ips_txt()
                await update.message.reply_text(f"🗑️ Removed: {removed}")
            else:
                await update.message.reply_text("❌ Invalid number.")
        except Exception:
            await update.message.reply_text("❌ Invalid number.")
        context.user_data["awaiting_remove_ip"] = False
        context.user_data.pop("remove_from", None)
        return

    if context.user_data.get("awaiting_admin"):
        try:
            target_uid = int(text)
            if target_uid in users_db:
                users_db[target_uid]["is_admin"] = True
                save_db()
                await update.message.reply_text(f"✅ {users_db[target_uid]['username']} is now admin.")
            else:
                await update.message.reply_text("⚠️ User not found.")
        except Exception:
            await update.message.reply_text("❌ Invalid ID.")
        context.user_data["awaiting_admin"] = False
        return

# ====== main ======
def main():
    load_db()
    save_ips_txt()

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("newip", newip))
    app.add_handler(CommandHandler("showip", showip))
    app.add_handler(CommandHandler("delip", delip))
    app.add_handler(CommandHandler("addadmin", addadmin))

    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    logging.info("🤖 Bot started...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
