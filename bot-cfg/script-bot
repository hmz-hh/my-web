#✅ bot script cfg
import os
import subprocess
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters,
    ConversationHandler
)

# =========================
# إعدادات
# =========================
TOKEN = "8323475423:AAE0tw2X0pEtf7Q0UE0dlUAFynlzY7rehBk"   # 🔴 غير بالتوكن ديالك
CHANNELS = ["@free_net_mrr", "@trusted_run", "@scr_freenet"]  
ADMINS = [7432279779]                                      
FILES_DIR = "files"
os.makedirs(FILES_DIR, exist_ok=True)

# ملفات التخزين
FILE_MAP_PATH = os.path.join(FILES_DIR, "file_map.txt")
USERS_FILE = os.path.join(FILES_DIR, "users.txt")
BLOCKED_FILE = os.path.join(FILES_DIR, "blocked.txt")

file_map = {}
USERNAME, PASSWORD = range(2)

# =========================
# أدوات التخزين
# =========================
def load_file_map():
    global file_map
    if os.path.exists(FILE_MAP_PATH):
        with open(FILE_MAP_PATH, "r", encoding="utf-8") as f:
            for line in f:
                key, fname = line.strip().split("::", 1)
                file_map[key] = fname

def save_file_map():
    with open(FILE_MAP_PATH, "w", encoding="utf-8") as f:
        for key, fname in file_map.items():
            f.write(f"{key}::{fname}\n")

def add_user(user_id: int):
    users = set()
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            users = set(map(int, f.read().splitlines()))
    if user_id not in users:
        with open(USERS_FILE, "a") as f:
            f.write(str(user_id) + "\n")

def get_users():
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r") as f:
        return [int(line.strip()) for line in f if line.strip().isdigit()]

def block_user(username: str):
    blocked = set()
    if os.path.exists(BLOCKED_FILE):
        with open(BLOCKED_FILE, "r") as f:
            blocked = set(f.read().splitlines())
    if username not in blocked:
        with open(BLOCKED_FILE, "a") as f:
            f.write(username + "\n")

def is_blocked(username: str) -> bool:
    if not os.path.exists(BLOCKED_FILE):
        return False
    with open(BLOCKED_FILE, "r") as f:
        blocked = set(f.read().splitlines())
    return username in blocked

# =========================
# التحقق من الاشتراك + إشعار الأدمن
# =========================
async def is_subscribed(user_id: int, context: ContextTypes.DEFAULT_TYPE, channel: str) -> bool:
    try:
        member = await context.bot.get_chat_member(channel, user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

async def enforce_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id
    username = update.effective_user.username or "بدون يوزر"
    first_name = update.effective_user.first_name or ""
    last_name = update.effective_user.last_name or ""
    fullname = (first_name + " " + last_name).strip()

    if is_blocked("@" + username):
        if update.message:
            await update.message.reply_text("تم حضرك من استخدام البوت 🔒")
        elif update.callback_query:
            await update.callback_query.message.reply_text("تم حضرك من استخدام البوت 🔒")
        return False

    for ch in CHANNELS:
        if not await is_subscribed(user_id, context, ch):
            keyboard = [
                [InlineKeyboardButton("📢 فتح القناة", url=f"https://t.me/{ch.strip('@')}")],
                [InlineKeyboardButton("✅ تحقق من الاشتراك", callback_data="check_sub")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            txt = (
                "❌| عذراً عزيزي.\n"
                "✅| عليك الاشتراك في قناة البوت لتتمكن من استخدامه\n\n"
                f"➡️ {ch}\n\n"
                "‼️| اشترك ثم اضغط الزر أدناه أو أعد إرسال /start"
            )
            if update.message:
                await update.message.reply_text(txt, reply_markup=reply_markup)
            elif update.callback_query:
                await update.callback_query.message.reply_text(txt, reply_markup=reply_markup)
            return False

    # إضافة المستخدم + إشعار الأدمن إذا جديد
    before = set(get_users())
    add_user(user_id)
    after = set(get_users())
    if user_id not in before and user_id in after:
        total_users = len(after)
        info = (
            "👤 مستخدم جديد دخل للبوت:\n\n"
            f"🆔 ID: `{user_id}`\n"
            f"📛 الاسم: {fullname}\n"
            f"🔗 اليوزر: @{username if username != 'بدون يوزر' else '—'}\n\n"
            f"📊 عدد المستخدمين الكلي: {total_users}"
        )
        for admin in ADMINS:
            try:
                await context.bot.send_message(admin, info, parse_mode="Markdown")
            except:
                pass

    return True

async def check_sub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    fake_update = Update(
        update.update_id,
        message=update.effective_message
    )
    await start(fake_update, context)
# =========================
# قائمة الأزرار
# =========================
def main_menu():
    keyboard = [
        [
            InlineKeyboardButton("📂 ملف وين 0 درهم اندرويد", callback_data="win_0_android"),
            InlineKeyboardButton("📂 ملف وين 0 درهم ايفون", callback_data="win_0_ios"),
        ],
        [
            InlineKeyboardButton("📂 ملف اتصالات *6 اندرويد", callback_data="it_6_android"),
            InlineKeyboardButton("📂 ملف اتصالات *6 ايفون", callback_data="it_6_ios"),
        ],
        [
            InlineKeyboardButton("📂 ملف انوي *6 اندرويد", callback_data="inwi_6_android"),
            InlineKeyboardButton("📂 ملف انوي *6 ايفون", callback_data="inwi_6_ios"),
        ],
        [
            InlineKeyboardButton("⚡ انشاء حساب SSH من VPS", callback_data="ssh_account"),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)

# =========================
# start command
# =========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await enforce_subscription(update, context):
        return
    await update.message.reply_text(
        "✅ مرحباً! اختار من القائمة:\n@free_net_mrr",
        reply_markup=main_menu()
    )

# =========================
# إرسال جماعي + حظر
# =========================
async def send_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        return
    msg = " ".join(context.args)
    if not msg:
        await update.message.reply_text("⚠️ استعمل: /send_all_users <رسالة>")
        return
    users = get_users()
    sent = 0
    for uid in users:
        try:
            await context.bot.send_message(uid, msg)
            sent += 1
        except:
            continue
    await update.message.reply_text(f"✅ الرسالة تم إرسالها لـ {sent} مستخدم.")

async def block_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        return
    if not context.args:
        await update.message.reply_text("⚠️ استعمل: /block_user @username")
        return
    username = context.args[0]
    block_user(username)
    await update.message.reply_text(f"⛔ تم حظر {username} بنجاح.")

# =========================
# التعامل مع الملفات
# =========================
async def handle_file_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await enforce_subscription(update, context):
        return

    query = update.callback_query
    user_id = query.from_user.id
    file_key = query.data

    if file_key == "ssh_account":
        await query.message.reply_text("📝 ادخل اسم المستخدم:")
        return USERNAME
    else:
        if file_key in file_map:
            file_name = file_map[file_key]
            file_path = os.path.join(FILES_DIR, file_name)

            if os.path.exists(file_path):
                if user_id in ADMINS:
                    keyboard = [
                        [InlineKeyboardButton("📥 تحميل الملف", callback_data=f"download_{file_key}")],
                        [InlineKeyboardButton("🔄 استبدال الملف", callback_data=f"replace_{file_key}")]
                    ]
                    await query.message.reply_text(
                        f"📂 الملف '{file_name}' موجود.\nشنو بغيتي تدير؟",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await query.message.reply_document(open(file_path, "rb"), filename=file_name)
            else:
                await query.message.reply_text("⚠️ الملف ضاع من السيرفر.")
        else:
            if user_id in ADMINS:
                await query.message.reply_text(
                    f"📤 أدمن العزيز، هاد الملف مازال ما كاينش.\n"
                    f"🔰 من فضلك ارفع الملف دابا باش يتخزن تحت المفتاح: {file_key}"
                )
                context.user_data["waiting_for_file"] = file_key
            else:
                await query.message.reply_text("هناك مشكلة اكتب /start رسالة للمواصة تشغيل")

# تحميل / استبدال
async def handle_replace_or_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if data.startswith("download_"):
        file_key = data.split("download_", 1)[1]
        if file_key in file_map:
            file_name = file_map[file_key]
            file_path = os.path.join(FILES_DIR, file_name)
            if os.path.exists(file_path):
                await query.message.reply_document(open(file_path, "rb"), filename=file_name)
            else:
                await query.message.reply_text("⚠️ الملف ضاع من السيرفر.")
    elif data.startswith("replace_") and user_id in ADMINS:
        file_key = data.split("replace_", 1)[1]
        context.user_data["waiting_for_file"] = file_key
        await query.message.reply_text(f"⬆️ أرسل الملف الجديد باش يتبدل مع {file_key}.")

# رفع الملفات
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await enforce_subscription(update, context):
        return

    user_id = update.effective_user.id
    if user_id in ADMINS and "waiting_for_file" in context.user_data:
        file_key = context.user_data.pop("waiting_for_file")

        document = update.message.document
        file_name = document.file_name
        file_path = os.path.join(FILES_DIR, file_name)

        new_file = await document.get_file()
        await new_file.download_to_drive(file_path)

        file_map[file_key] = file_name
        save_file_map()

        await update.message.reply_text(f"✅ الملف '{file_name}' ترفع وتبدل بنجاح.")
    else:
        await update.message.reply_text("⛔ ما عندكش صلاحية ترفع ملفات هنا.")

# =========================
# حوار إنشاء SSH
# =========================
async def get_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await enforce_subscription(update, context):
        return ConversationHandler.END
    context.user_data["username"] = update.message.text.strip()
    await update.message.reply_text("🔑 ادخل كلمة المرور:")
    return PASSWORD

async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await enforce_subscription(update, context):
        return ConversationHandler.END
    context.user_data["password"] = update.message.text.strip()
    user = context.user_data["username"]
    passwd = context.user_data["password"]
    expire = "3"
    iplim = "50"

    process = subprocess.Popen(
        ["/bin/bash", "/root/addssh.sh"],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    inputs = f"{user}\n{passwd}\n{expire}\n{iplim}\n"
    out, err = process.communicate(inputs)

    if process.returncode == 0:
        await update.message.reply_text(f"✅ الحساب تخلق بنجاح:\n\n{out}")
        for admin in ADMINS:
            try:
                await context.bot.send_message(
                    admin,
                    f"📢 تم انشاء حساب جديد:\n\n"
                    f"user: {user}\npassword: {passwd}\n"
                    f"المستخدم: @{update.effective_user.username or update.effective_user.id}"
                )
            except:
                pass
    else:
        await update.message.reply_text(f"⚠️ خطأ:\n{err}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("❌ تم إلغاء العملية")
    return ConversationHandler.END

# =========================
# تشغيل البوت
# =========================
def main():
    load_file_map()
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_file_request, pattern="^ssh_account$")],
        states={
            USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_username)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("send_all_users", send_all))
    app.add_handler(CommandHandler("block_user", block_cmd))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_file_request))
    app.add_handler(CallbackQueryHandler(handle_replace_or_download, pattern="^(replace_|download_).*$"))
    app.add_handler(CallbackQueryHandler(check_sub, pattern="^check_sub$"))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))

    print("🚀 البوت خدام دابا...")
    app.run_polling()

if __name__ == "__main__":
    main()
